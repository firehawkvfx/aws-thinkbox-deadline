#!/bin/bash

# This installs certificates with the DB or generate certs after DB for RCS.

set -e

readonly DEFAULT_DEADLINEUSER_NAME="deadlineuser"
readonly DEFAULT_DBPORT="27100"
readonly DEFAULT_PROXYPORT="4433"
readonly DEFAULT_HTTPPORT="8080"
readonly DEFAULT_DOWNLOAD_DIR="/var/tmp/downloads"
# readonly DEFAULT_DB_HOST_NAME="deadlinedb.service.consul"
readonly DEFAULT_DEADLINE_PROXY_CERTIFICATE="Deadline10RemoteClient.pfx"
readonly DEFAULT_DEADLINE_CLIENT_CERTIFICATE="Deadline10Client.pfx"
readonly DEFAULT_MONGO_URL="https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-3.6.19.tgz"
readonly DEFAULT_DOWNLOAD_INSTALLERS="true"

# Functions
function print_usage {
  echo
  echo "Usage: install-deadline [OPTIONS]"
  echo
  echo "This script can be used to download and install Deadline DB and RCS.  It optionally configures certificates post install for immutable infrastructure usage. This script has been tested with Ubuntu 18.04."
  echo
  echo "Options:"
  echo
  echo -e "  --deadline-version\t\tThe version to download and install"
  echo -e "  --db-host-name\t\tThis hostname / hostname of the deadline DB. Example: deadlinedb.service.consul"
  echo -e "  --installers-bucket\t\tAn alternate S3 Bucket to use if the Thinkbox S3 Bucket is missing the deadline installer version you require. It will also upload any new Deadline installer to this bucket for archival and reprocibility. Optional"
  echo -e "  --deadlineuser-name\t\tThe username to configure the deadline DB user for and install the software as this user. Optional. Default: $DEFAULT_DEADLINEUSER_NAME."
  echo -e "  --skip-certgen-during-db-install\t\tInstall DB without generating certificates.  Used for building images. Optional."
  echo -e "  --skip-certgen-during-rcs-install\t\tInstall RCS without generating certificates.  Used for building images. Optional."
  echo -e "  --skip-install-db\t\tSkip installing the DB. Optional."
  echo -e "  --post-certgen-db\t\tPost configure Deadline DB certificates.  Used when deploying a prebuilt image. Optional."
  echo -e "  --post-certgen-rcs\t\tPost configure remote client and RCS certificates.  Used when deploying a prebuilt image. Optional."
  echo -e "  --skip-download-installers\t\tSkip downloading installers. Used when deploying a prebuilt image. Optional"
  echo -e "  --skip-install-packages\t\tSkip installing required packages. Used when deploying a prebuilt image. Optional"
  echo -e "  --skip-install-validation\t\tSkip testing the service after install. Used when installing on for an image. Optional"
  
  echo
  echo "Example:"
  echo
  echo "  install-deadline --deadline-version 10.1.14.5"
}

function log {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local -r message="$1"
  log "INFO" "$message"
}

function log_warn {
  local -r message="$1"
  log "WARN" "$message"
}

function log_error {
  local -r message="$1"
  log "ERROR" "$message"
}

function assert_not_empty {
  local -r arg_name="$1"
  local -r arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function assert_either_or {
  local -r arg1_name="$1"
  local -r arg1_value="$2"
  local -r arg2_name="$3"
  local -r arg2_value="$4"

  if [[ -z "$arg1_value" && -z "$arg2_value" ]]; then
    log_error "Either the value for '$arg1_name' or '$arg2_name' must be passed, both cannot be empty"
    print_usage
    exit 1
  fi
}

function has_yum {
  [[ -n "$(command -v yum)" ]]
}

function has_apt_get {
  [[ -n "$(command -v apt-get)" ]]
}

# A retry function that attempts to run a command a number of times and returns the output
function retry {
  local -r cmd="$1"
  local -r description="$2"

  for i in $(seq 1 30); do
    log "$description"

    # The boolean operations with the exit status are there to temporarily circumvent the "set -e" at the
    # beginning of this script which exits the script immediatelly for error status while not losing the exit status code
    output=$(eval "$cmd") && exit_status=0 || exit_status=$?
    errors=$(echo "$output") | grep '^{' | jq -r .errors

    log "$output"

    if [[ $exit_status -eq 0 && -n "$output" && -z "$errors" ]]; then
      echo "$output"
      return
    fi
    log "$description failed. Will sleep for 10 seconds and try again."
    sleep 10
  done;

  log "$description failed after 30 attempts."
  exit $exit_status
}

function replace_line() {
  local -r filepath=$1
  local -r start=$2
  local -r end=$3
  PYTHON_CODE=$(cat <<END
import argparse
import sys
import fileinput
print("open: {} replace after: {} with: {}".format( "$filepath", "$start", "$end" ))
for line in fileinput.input(["$filepath"], inplace=True):
    if line.startswith("$start"):
        line = '{}\n'.format( "$end" )
    sys.stdout.write(line)
END
)
  sudo python3 -c "$PYTHON_CODE"
}

function ensure_value() { # If the pattern matches, the value will be replaced, otherwise it willl be appended.
  local -r filepath=$1
  local -r start=$2
  local -r end=$3
  PYTHON_CODE=$(cat <<END
import argparse
import sys
import fileinput
print("open: {} replace after: {} with: {}".format( "$filepath", "$start", "$end" ))
replaced=False
for line in fileinput.input(["$filepath"], inplace=True):
    if line.startswith("$start"):
        line = '{}{}\n'.format( "$start", "$end" )
        replaced=True
    sys.stdout.write(line)
if replaced==False: # Append if no match
    with open("$filepath", "a") as file_object:
        line = '{}{}\n'.format( "$start", "$end" )
        file_object.write(line)
END
)
  sudo python3 -c "$PYTHON_CODE"
}

function download_mongo {
  local -r mongo_installer_tgz="$1"
  local -r mongo_url="$2"
  if [[ ! -d "$(dirname $mongo_installer_tgz)" ]]; then
    log_info "Ensuring dir exists for installers."
    mkdir -p  "$(dirname $mongo_installer_tgz)"
  fi

  log_info "...Check for mongo installer" # Download mongo
  if [[ -f "$mongo_installer_tgz" ]]; then
      log_info "File already exists: $mongo_installer_tgz"
  else
      wget $mongo_url -O $mongo_installer_tgz
  fi
}

function download_deadline {
  local -r deadline_installers_tar="$1"
  local -r deadline_installer_bucket_key="$2"
  local -r deadline_installers_filename="$3"
  local -r installers_bucket="$4"
  local -r deadline_installer_dir="$5"
  local -r extract_installer="$6"

  local attempt_upload="true"

  if [[ ! -d "$(dirname $deadline_installers_tar)" ]]; then
    log_info "Ensuring dir exists for installers."
    mkdir -p  "$(dirname $deadline_installers_tar)"
  fi

  if [[ -f "$deadline_installers_tar" ]]; then
    log_info "File already exists: $deadline_installers_tar"
  else
    # Prefer installation from Thinkbox S3 Bucket for visibility when a version is deprecated.
    log_info "Get object with: aws s3api head-object --bucket thinkbox-installers --key ${deadline_installer_bucket_key}"
    output=$(aws s3api head-object --bucket thinkbox-installers --key "${deadline_installer_bucket_key}") && exit_status=0 || exit_status=$?
    if [[ $exit_status -eq 0 ]]; then
      log_info "...Downloading Deadline (${deadline_installers_filename}) from: thinkbox-installers"
      aws s3api get-object --bucket thinkbox-installers --key "${deadline_installer_bucket_key}" "${deadline_installers_tar}"
    else
      printf "\n\nWarning: The installer was not aquired from Thinkbox.  It may have become deprecated.  Other AWS Accounts will not be able to install this version.\n\n"
      if [[ ! -z "$installers_bucket" ]]; then
        log_info "...Downloading from: $installers_bucket"
        aws s3api get-object --bucket $installers_bucket --key "$deadline_installers_filename" "${deadline_installers_tar}"
        attempt_upload="false"
      fi
    fi
  fi

  if [[ ! -f "$deadline_installers_tar" ]]; then
    log_error "File not found locally after attempted download"
    exit 1
  else

  # If this doesn't exist in user bucket, upload it for reproducibility (incase the Thinkbox installer becomes unavailable).
  if [[ "$attempt_upload" == "true" && ! -z "$installers_bucket" ]]; then
    log_info "...Querying if this file exists in $installers_bucket"
    output=$(aws s3api head-object --bucket $installers_bucket --key "$deadline_installers_filename") && exit_status=0 || exit_status=$?
    if [[ ! $exit_status -eq 0 ]]; then
      log_info "Uploading the file to $installers_bucket $deadline_installers_filename"
      aws s3api put-object --bucket $installers_bucket --key "$deadline_installers_filename" --body "${deadline_installers_tar}"
    else
      log_info "The bucket $installers_bucket already contains: $deadline_installers_filename"
    fi
  fi

  if [[ "$extract_installer" == "true" ]]; then
    log_info "...Extract installler"
    sudo mkdir -p $deadline_installer_dir
    # Extract Installer
    sudo tar -xvf $deadline_installers_tar -C $deadline_installer_dir
  fi

}

function setup_directories_and_permissions {
  local -r deadlineuser_name="$1"
  local -r deadline_certificates_location="$2"
  local -r deadline_client_certificates_location="$3"

  log_info "Setup directories and permissions."
  # Directories and permissions
  sudo mkdir -p /opt/Thinkbox
  sudo chown $deadlineuser_name:$deadlineuser_name /opt/Thinkbox
  sudo chmod u=rwX,g=rX,o-rwx /opt/Thinkbox

  # DB certs by default live here
  sudo mkdir -p "$deadline_certificates_location"
  sudo chown $deadlineuser_name:$deadlineuser_name $deadline_certificates_location
  sudo chmod u=rwX,g=rX,o-rwx "$deadline_certificates_location"

  # Client certs live here
  sudo mkdir -p "$deadline_client_certificates_location"
  sudo chown $deadlineuser_name:$deadlineuser_name $deadline_client_certificates_location
  sudo chmod u=rwX,g=rX,o-rwx "$deadline_client_certificates_location"
}

function install_db_with_certs {
  log_info "...Install DB with certificates"
  local -r deadline_installer_dir="$1"
  local -r deadline_db_installer_filename="$2"
  local -r mongo_installer_tgz="$3"
  local -r dbport="$4"
  local -r db_host_name="$5"
  local -r deadlineuser_name="$6"
  local -r deadline_certificates_location="$7"

  # Install Deadline DB
  set -x
  sudo $deadline_installer_dir/$deadline_db_installer_filename \
  --mode unattended \
  --debuglevel 2 \
  --prefix /opt/Thinkbox/DeadlineRepository10 \
  --setpermissions true \
  --installmongodb true \
  --prepackagedDB $mongo_installer_tgz \
  --dbOverwrite true \
  --mongodir /opt/Thinkbox/DeadlineDatabase10 \
  --dbListeningPort $dbport \
  --dbhost $db_host_name \
  --dbport $dbport \
  --dbuser $deadlineuser_name \
  --certgen_outdir $deadline_certificates_location \
  --createX509dbuser true \
  --requireSSL true \
  --dbssl true
  set +x
  # --dbauth true \
  # --dbpassword avaultpassword \
  # --certgen_password avaultpassword \
  # --dbcertpass avaultpassword
  log_info "Completed DB install."
}

function install_db_without_certs {
  log_info "...Install DB without certificates"
  local -r deadline_installer_dir="$1"
  local -r deadline_db_installer_filename="$2"
  local -r mongo_installer_tgz="$3"
  local -r dbport="$4"
  local -r db_host_name="$5"
  local -r deadlineuser_name="$6"
  local -r deadline_certificates_location="$7"

  # Install Deadline DB
  set -x
  sudo $deadline_installer_dir/$deadline_db_installer_filename \
  --mode unattended \
  --debuglevel 2 \
  --prefix /opt/Thinkbox/DeadlineRepository10 \
  --setpermissions true \
  --installmongodb true \
  --prepackagedDB $mongo_installer_tgz \
  --dbOverwrite true \
  --mongodir /opt/Thinkbox/DeadlineDatabase10 \
  --dbListeningPort $dbport \
  --dbhost $db_host_name \
  --dbport $dbport \
  --dbuser $deadlineuser_name \
  --certgen_outdir $deadline_certificates_location \
  --createX509dbuser true \
  --requireSSL false \
  --dbssl false
  set +x
  # --dbauth true \
  log_info "Completed DB install."
}

function start_db_service_and_validate {
  local -r dbport="$1"
  log_info "...Validating.  Ensure a connection with the database can be established with the configuration."

  log_info "..Restart Deadline10db service"
  sudo service Deadline10db restart # Now that config is done start the DB and the launcher.
  log_info "...Waiting for DB port: $dbport"
  while ! timeout 1 bash -c "echo > /dev/tcp/localhost/$dbport"; do sleep 10; done # see alternatives https://unix.stackexchange.com/
  
  log_info "..Restart Deadline10db service" # Sometimes, this is required twice for unknown reasons.
  sudo service Deadline10db restart
  log_info "...Waiting for DB port: $dbport"
  while ! timeout 1 bash -c "echo > /dev/tcp/localhost/$dbport"; do sleep 10; done # see alternatives https://unix.stackexchange.com/

  # sudo service deadline10launcher restart
  # show open ports
  netstat -lnt
  sudo /opt/Thinkbox/DeadlineDatabase10/mongo/application/bin/deadline_mongo --eval 'printjson(db.getCollectionNames())'
  printf "\n\nDeadline succesfully established a connection with the DB.\n\n"
}

function start_launcher {
  local -r dbport="$1"
  local -r proxyport="$2"

  log_info "...Waiting for DB port: $dbport"
  while ! timeout 1 bash -c "echo > /dev/tcp/localhost/$dbport"; do sleep 10; done # see alternatives https://unix.stackexchange.com/
  sudo service deadline10launcher restart
  sleep 1
  sudo service deadline10launcher restart # after configuring new certs for some reason we need to restart twice
  log_info "...Waiting for RCS port: $proxyport"
  while ! timeout 1 bash -c "echo > /dev/tcp/localhost/$proxyport"; do sleep 10; done # see alternatives https://unix.stackexchange.com/
}

function get_ssl_gen_repo {
  local -r deadlineuser_name="$1"
  local -r skip_install_packages="$2"
  local -r ssl_keygen_base_path="${HOME}/Downloads/SSLGeneration"

  # Generate Certs - see https://docs.thinkboxsoftware.com/products/deadline/10.0/1_User%20Manual/manual/proxy-sslgen.html
  if [[ "$skip_install_packages" == "false" ]]; then
    sudo apt-get install -y python-openssl
  fi
  sudo rm -frv "$ssl_keygen_base_path" # if this is a repeated install, clear the keys
  mkdir -p "$(dirname $ssl_keygen_base_path)"
  git clone https://github.com/ThinkboxSoftware/SSLGeneration.git "$ssl_keygen_base_path"
}

function generate_certs_for_db_and_rcs {
  log_info "...Generate certificates for DB."
  local -r deadlineuser_name="$1"
  local -r cert_org="$2"
  local -r cert_ou="$3"
  local -r server_cert_basename="$4"
  local -r deadline_certificates_location="$5"
  local -r deadline_client_certificate_basename="$6"
  local -r deadline_client_certificate="$7"
  local -r skip_install_packages="$8"
  local -r deadline_version="$9"
  local -r deadline_proxy_certificate="${10}"
  local -r dbport="${11}"
  local -r deadline_major_version="$(echo $deadline_version | awk -F '.' '{print $1}')"
  local -r ssl_keygen_base_path="${HOME}/Downloads/SSLGeneration"
  local -r ssl_keygen_path="$ssl_keygen_base_path/keys"
  local -r deadline_proxy_certificate_basename="${deadline_proxy_certificate%.*}"

  cd /home/$deadlineuser_name/Downloads/SSLGeneration

  # CA
  log_info "...Generate CA"
  python ssl_gen.py --ca --cert-org "$cert_org" --cert-ou "$cert_ou"
  # Server Cert
  log_info "...Generate Server Cert"
  python ssl_gen.py --server --cert-name "$server_cert_basename"
  cat "${ssl_keygen_path}/${server_cert_basename}.crt" "${ssl_keygen_path}/${server_cert_basename}.key" | sudo tee "${ssl_keygen_path}/${server_cert_basename}.pem"

  log_info "...Generate Client Cert"
  python ssl_gen.py --client --cert-name "$deadline_client_certificate_basename" --cert-org "$cert_org" --cert-ou "$deadline_client_certificate_basename" # We need this subject according to the result in deadline_mongo with a standard install "OU=Deadline10Client,O=Deadline10Installer,CN=Deadline10Client"

  log_info "...Generate Client pfx" # TODO: This is possibly not used, need to investigate!
  python ssl_gen.py --pfx --cert-name "$deadline_client_certificate_basename" --cert-org "$cert_org" --cert-ou "$deadline_client_certificate_basename"

  log_info "...Create mongo_client.pem from $deadline_client_certificate_basename.crt and $deadline_client_certificate_basename.key"
  cat "${ssl_keygen_path}/${deadline_client_certificate_basename}.crt" "${ssl_keygen_path}/${deadline_client_certificate_basename}.key" | sudo tee "${ssl_keygen_path}/mongo_client.pem" # Is this being produced correctly?

  log_info "...Relocate certs"
  sudo mv -v "${ssl_keygen_path}/ca.crt" "$deadline_certificates_location"
  sudo mv -v "${ssl_keygen_path}/$deadline_client_certificate" "$deadline_certificates_location"
  sudo mv -v "${ssl_keygen_path}/${server_cert_basename}.pem" "$deadline_certificates_location"
  sudo mv -v "${ssl_keygen_path}/mongo_client.pem" "$deadline_certificates_location"

  # Certs Permissions
  db_certificate_permissions "$deadlineuser_name" "$deadline_certificates_location" "$deadline_client_certificate" "$server_cert_basename"
  
  sudo service Deadline10db stop # stop service before updating config.

  # configure x509 user: https://docs.mongodb.com/v3.6/tutorial/configure-x509-client-authentication/
  x509_subject=$(openssl x509 -in "${deadline_certificates_location}/mongo_client.pem" -inform PEM -subject -nameopt RFC2253 | head -1 | sed 's/^.\{8\}//') # extract subject from cert for user name.
  log_info "subject: $x509_subject"
  
  LINE=$(cat <<END
db.getSiblingDB("\$external").runCommand(
  {
    createUser: "${x509_subject}",
    roles: [
         { role: "readWrite", db: "test" },
         { role: "readWrite", db: "deadline${deadline_major_version}db" },
         { role: "userAdminAnyDatabase", db: "admin" }
    ],
    writeConcern: { w: "majority" , wtimeout: 5000 }
  }
)
END
)
  start_db_service_and_validate "$dbport"
  log_info "...Adding x509 User:"
  sudo /opt/Thinkbox/DeadlineDatabase10/mongo/application/bin/deadline_mongo --eval "$LINE"
  
  # Configure Mongo : /opt/Thinkbox/DeadlineDatabase10/mongo/data/config.conf
  ensure_value "/opt/Thinkbox/DeadlineDatabase10/mongo/data/config.conf"        "    mode:" " requireSSL"
  replace_line "/opt/Thinkbox/DeadlineDatabase10/mongo/data/config.conf"      "    #CAFile:" "    CAFile: ERROR_DURING_REPLACEMENT" # if you can read this result, something went wrong
  ensure_value "/opt/Thinkbox/DeadlineDatabase10/mongo/data/config.conf"      "    CAFile:" " $deadline_certificates_location/ca.crt"
  replace_line "/opt/Thinkbox/DeadlineDatabase10/mongo/data/config.conf"  "    #PEMKeyFile:" "    PEMKeyFile: ERROR_DURING_REPLACEMENT" # if you can read this result, something went wrong
  ensure_value "/opt/Thinkbox/DeadlineDatabase10/mongo/data/config.conf"  "    PEMKeyFile:" " $deadline_certificates_location/$server_cert_basename.pem"
  ensure_value "/opt/Thinkbox/DeadlineDatabase10/mongo/data/config.conf" "  authorization:" " enabled" # ? not sure what this should be

  # We modify deadline_mongo script to use certs: /opt/Thinkbox/DeadlineDatabase10/mongo/application/bin/deadline_mongo 
  # exec /opt/Thinkbox/DeadlineDatabase10/mongo/application/bin/mongo "deadline10db" --host "deadlinedb.service.consul" --port "27100" "$@"
  # Becomes:
  # exec /opt/Thinkbox/DeadlineDatabase10/mongo/application/bin/mongo "deadline10db" --host "deadlinedb.service.consul" --port "27100" --ssl --sslPEMKeyFile "/opt/Thinkbox/DeadlineDatabase10/certs/mongo_client.pem" --sslCAFile "/opt/Thinkbox/DeadlineDatabase10/certs/ca.crt" --authenticationDatabase '$external' --authenticationMechanism "MONGODB-X509" --username "OU=Deadline10Client,O=Deadline10Installer,CN=Deadline10Client" "$@"
  LINE=$(cat <<END
exec /opt/Thinkbox/DeadlineDatabase10/mongo/application/bin/mongo \"deadline10db\" --host \"deadlinedb.service.consul\" --port \"27100\" --ssl --sslPEMKeyFile \"${deadline_certificates_location}/mongo_client.pem\" --sslCAFile \"${deadline_certificates_location}/ca.crt\" --authenticationDatabase '\$external' --authenticationMechanism \"MONGODB-X509\" --username \"OU=Deadline10Client,O=Deadline10Installer,CN=Deadline10Client\" \"\$@\"
END
)
  replace_line "/opt/Thinkbox/DeadlineDatabase10/mongo/application/bin/deadline_mongo"  "exec /opt/Thinkbox/DeadlineDatabase10/mongo/application/bin/mongo" "$LINE"
}

function generate_certs_for_clients {
  log_info "...Generate certificates for client."
  local -r deadlineuser_name="$1"
  local -r cert_org="$2"
  local -r rcs_cert_ou="$3"
  local -r server_cert_basename="$4"
  local -r deadline_client_certificates_location="$5"
  local -r deadline_client_certificate_basename="$6"
  local -r deadline_client_certificate="$7"
  local -r skip_install_packages="$8"
  local -r deadline_version="$9"
  local -r deadline_proxy_certificate="${10}"
  local -r dbport="${11}"
  local -r deadline_major_version="$(echo $deadline_version | awk -F '.' '{print $1}')"
  local -r ssl_keygen_base_path="${HOME}/Downloads/SSLGeneration"
  local -r ssl_keygen_path="$ssl_keygen_base_path/keys"
  local -r deadline_proxy_certificate_basename="${deadline_proxy_certificate%.*}"
  
  cd $ssl_keygen_base_path

  log_info "...Clear any previous keys"
  rm -frv ${ssl_keygen_path}/*
  
  # CA
  log_info "...Generate CA"
  python ssl_gen.py --ca --cert-org "$cert_org" --cert-ou "$rcs_cert_ou"

  # Server Cert
  log_info "...Generate Server Cert"
  python ssl_gen.py --server --cert-name "$server_cert_basename" # ? TODO: identify should this be a server or client cert ?
  cat "${ssl_keygen_path}/${server_cert_basename}.crt" "${ssl_keygen_path}/${server_cert_basename}.key" | sudo tee "${ssl_keygen_path}/${server_cert_basename}.pem"

  log_info "...Generate Host PFX Cert: $server_cert_basename" # should this be converted from the above instead?
  python ssl_gen.py --pfx --cert-name "$server_cert_basename"

  log_info "...Generate Client Cert: $deadline_proxy_certificate_basename"
  python ssl_gen.py --client --cert-name "$deadline_proxy_certificate_basename"
  # PEM key is required to extract subject
  cat "${ssl_keygen_path}/${deadline_proxy_certificate_basename}.crt" "${ssl_keygen_path}/${deadline_proxy_certificate_basename}.key" | sudo tee "${ssl_keygen_path}/${deadline_proxy_certificate_basename}.pem"

  log_info "...Generate Client PFX Cert: $deadline_proxy_certificate_basename"
  python ssl_gen.py --pfx --cert-name "$deadline_proxy_certificate_basename" # We need this subject according to the result in deadline_mongo with a standard install "OU=Deadline10Client,O=Deadline10Installer,CN=Deadline10Client"

  log_info "...Relocate certs"
  sudo mv -v "${ssl_keygen_path}/ca.crt" "$deadline_client_certificates_location"
  sudo mv -v "${ssl_keygen_path}/${server_cert_basename}.pfx" "$deadline_client_certificates_location"
  sudo mv -v "${ssl_keygen_path}/${deadline_proxy_certificate_basename}.pfx" "$deadline_client_certificates_location"
  # sudo mv -v "${ssl_keygen_path}/mongo_client.pem" "$deadline_client_certificates_location"

  # Certs Permissions
  client_certificate_permissions "$deadlineuser_name" "$deadline_client_certificates_location" "$deadline_proxy_certificate_basename" "$server_cert_basename"

  # sudo service Deadline10db start # stop service before updating config.

  # configure x509 user: https://docs.mongodb.com/v3.6/tutorial/configure-x509-client-authentication/
  x509_subject=$(openssl x509 -in "${ssl_keygen_path}/${server_cert_basename}.pem" -inform PEM -subject -nameopt RFC2253 | head -1 | sed 's/^.\{8\}//') # extract subject from cert for user name.
  log_info "Add user subject: $x509_subject"
  LINE1=$(cat <<END
db.getSiblingDB("\$external").runCommand(
  {
    createUser: "${x509_subject}",
    roles: [
         { role: "readWrite", db: "test" },
         { role: "readWrite", db: "deadline${deadline_major_version}db" },
         { role: "userAdminAnyDatabase", db: "admin" }
    ],
    writeConcern: { w: "majority" , wtimeout: 5000 }
  }
)
END
)
  x509_subject=$(openssl x509 -in "${ssl_keygen_path}/${deadline_proxy_certificate_basename}.pem" -inform PEM -subject -nameopt RFC2253 | head -1 | sed 's/^.\{8\}//') # extract subject from cert for user name.
  log_info "Add user subject: $x509_subject"
  LINE2=$(cat <<END
db.getSiblingDB("\$external").runCommand(
  {
    createUser: "${x509_subject}",
    roles: [
         { role: "readWrite", db: "deadline${deadline_major_version}db" },
    ],
    writeConcern: { w: "majority" , wtimeout: 5000 }
  }
)
END
)

  start_db_service_and_validate "$dbport"
  log_info "...Adding x509 Admin User for RCS: $LINE1"
  sudo /opt/Thinkbox/DeadlineDatabase10/mongo/application/bin/deadline_mongo --eval "$LINE1"
  log_info "...Adding x509 Remote Client User for RCS: $LINE2"
  sudo /opt/Thinkbox/DeadlineDatabase10/mongo/application/bin/deadline_mongo --eval "$LINE2"

  # TODO need to add remote user for RCS with correct permissions
  sudo service Deadline10db restart
}

function db_certificate_permissions {
  local -r deadlineuser_name="$1"
  local -r deadline_certificates_location="$2"
  local -r deadline_client_certificate="$3"
  local -r server_cert_basename="$4"

  sudo chown $deadlineuser_name:$deadlineuser_name $deadline_certificates_location
  sudo chmod u+rX,g+rX,o-rwx $deadline_certificates_location

  sudo chown $deadlineuser_name:$deadlineuser_name $deadline_certificates_location/*
  sudo chmod u=r,g=r,o=r "${deadline_certificates_location}/${deadline_client_certificate}"
  sudo chmod o-rwx ${deadline_certificates_location}/$deadline_client_certificate
  sudo chmod o-rwx "${deadline_certificates_location}/${server_cert_basename}.pem"
  sudo chmod o-rwx "${deadline_certificates_location}/mongo_client.pem"
}

function client_certificate_permissions {
  local -r deadlineuser_name="$1"
  local -r deadline_client_certificates_location="$2"
  local -r deadline_proxy_certificate_basename="$3"
  local -r server_cert_basename="$4"

  sudo chown $deadlineuser_name:$deadlineuser_name $deadline_client_certificates_location
  sudo chmod u+rX,g+rX,o-rwx $deadline_client_certificates_location

  sudo chown $deadlineuser_name:$deadlineuser_name $deadline_client_certificates_location/*
  sudo chmod u=wrX,g=r,o-rwx $deadline_client_certificates_location/*
  sudo chmod u=wr,g=r,o=r "${deadline_client_certificates_location}/ca.crt"
  sudo chmod u=rw,g=r,o-rwx "${deadline_client_certificates_location}/${deadline_proxy_certificate_basename}.pfx"
  sudo chmod u=rw,g=r,o-rwx "${deadline_client_certificates_location}/${server_cert_basename}.pfx"
}

function post_db_install_permissions {
  log_info "...Configure permissions post DB install"
  local -r deadlineuser_name="$1"

  # finalize permissions post install:
  sudo chown $deadlineuser_name:$deadlineuser_name /opt/Thinkbox/
  sudo chmod u+rX,g+rX,o-rwx /opt/Thinkbox/

  sudo chown -R $deadlineuser_name:$deadlineuser_name /opt/Thinkbox/DeadlineDatabase10

  sudo chown -R $deadlineuser_name:$deadlineuser_name /opt/Thinkbox/DeadlineRepository10
  sudo chmod -R u=rX,g=rX,o-rwx /opt/Thinkbox/DeadlineRepository10
  sudo chmod u=rwX,g=rwX,o=r /opt/Thinkbox/DeadlineRepository10

  sudo chown -R $deadlineuser_name:$deadlineuser_name /opt/Thinkbox/DeadlineRepository10/jobs
  sudo chmod -R u=rwX,g=rwX,o-rwx /opt/Thinkbox/DeadlineRepository10/jobs

  sudo chown -R $deadlineuser_name:$deadlineuser_name /opt/Thinkbox/DeadlineRepository10/jobsArchived
  sudo chmod -R u=rwX,g=rwX,o-rwx /opt/Thinkbox/DeadlineRepository10/jobsArchived

  sudo chown -R $deadlineuser_name:$deadlineuser_name /opt/Thinkbox/DeadlineRepository10/reports
  sudo chmod -R u=rwX,g=rwX,o-rwx /opt/Thinkbox/DeadlineRepository10/reports

  # Restart Deadline / Mongo service
  sudo systemctl daemon-reload
  sudo service Deadline10db start
}

function install_packages {
  if $(has_apt_get); then
    sudo apt-get install -y xdg-utils lsb
  elif $(has_yum); then
    sudo yum install -y redhat-lsb samba-client samba-common cifs-utils nfs-utils tree bzip2 nmap wget
  fi
}

function install_rcs_no_generate_certs {
  local -r deadline_installer_dir="$1"
  local -r deadline_client_installer_filename="$2"
  local -r deadline_certificates_location="$3"
  local -r deadline_client_certificates_location="$4"
  local -r deadline_client_certificate="$5"
  local -r deadline_proxy_certificate="$6"
  local -r deadlineuser_name="$7"
  local -r httpport="$8"
  local -r proxyport="$9"
  local -r deadline_proxy_root_dir="${10}"
  local -r skip_install_packages="${11}"
  local -r server_cert_basename="${12}"

  # Directories and Permissions
  if [[ "$skip_install_packages" == "false" ]]; then
    log_info "...Install packages for Deadline RCS"
    install_packages
  fi
  sudo mkdir -p /usr/share/desktop-directories

  log_info "...Installing Deadline Client: RCS with disabled cert generation"
  # Install Client:
  # Deadline RCS
  set -x
  sudo $deadline_installer_dir/$deadline_client_installer_filename \
  --mode unattended \
  --launcherdaemon true \
  --enable-components proxyconfig \
  --servercert "${deadline_client_certificates_location}/${server_cert_basename}.pfx" \
  --cacert "${deadline_client_certificates_location}/ca.crt" \
  --debuglevel 2 \
  --prefix /opt/Thinkbox/Deadline10 \
  --connectiontype Repository \
  --repositorydir /opt/Thinkbox/DeadlineRepository10/ \
  --dbsslcertificate "${deadline_certificates_location}/${deadline_client_certificate}" \
  --licensemode UsageBased \
  --daemonuser "$deadlineuser_name" \
  --connserveruser "$deadlineuser_name" \
  --httpport $httpport \
  --tlsport $proxyport \
  --enabletls true \
  --tlscertificates existing  \
  --slavestartup false \
  --proxyrootdir $deadline_proxy_root_dir \
  --proxycertificate $deadline_client_certificates_location/$deadline_proxy_certificate
  set +x
  # --generatedcertdir "${deadline_client_certificates_location}/" \
  # --dbsslpassword avaultpassword \
  # --clientcert_pass avaultpassword \
  # --proxycertificatepassword avaultpassword
}

function install_rcs_generate_certs {
  local -r deadline_installer_dir="$1"
  local -r deadline_client_installer_filename="$2"
  local -r deadline_certificates_location="$3"
  local -r deadline_client_certificates_location="$4"
  local -r deadline_client_certificate="$5"
  local -r deadline_proxy_certificate="$6"
  local -r deadlineuser_name="$7"
  local -r httpport="$8"
  local -r proxyport="$9"
  local -r deadline_proxy_root_dir="${10}"
  local -r skip_install_packages="${11}"

  # Directories and Permissions
  if [[ "$skip_install_packages" == "false" ]]; then
    log_info "...Install packages for Deadline RCS"
    install_packages
  fi
  sudo mkdir -p /usr/share/desktop-directories

  log_info "...Installing Deadline Client: RCS with certs"
  # Install Client:
  # Deadline RCS # TODO: consider removing servercert since it is probably incorrect and being regenerated anyway.
  set -x
  sudo $deadline_installer_dir/$deadline_client_installer_filename \
  --mode unattended \
  --launcherdaemon true \
  --enable-components proxyconfig \
  --servercert "${deadline_certificates_location}/${deadline_client_certificate}" \
  --debuglevel 2 \
  --prefix /opt/Thinkbox/Deadline10 \
  --connectiontype Repository \
  --repositorydir /opt/Thinkbox/DeadlineRepository10/ \
  --dbsslcertificate "${deadline_certificates_location}/${deadline_client_certificate}" \
  --licensemode UsageBased \
  --daemonuser "$deadlineuser_name" \
  --connserveruser "$deadlineuser_name" \
  --httpport $httpport \
  --tlsport $proxyport \
  --enabletls true \
  --tlscertificates generate  \
  --generatedcertdir "${deadline_client_certificates_location}/" \
  --slavestartup false \
  --proxyrootdir $deadline_proxy_root_dir \
  --proxycertificate "$deadline_client_certificates_location/$deadline_proxy_certificate"
  set +x
  # --dbsslpassword avaultpassword \
  # --clientcert_pass avaultpassword \
  # --proxycertificatepassword avaultpassword
}

function install_client_worker { # see here for example on how to configure instead on instance launch https://docs.thinkboxsoftware.com/products/deadline/10.1/1_User%20Manual/manual/event-spot-deadline-connect.html#event-spot-deadline-connect-ref-label
  local -r deadline_installer_dir="$1"
  local -r deadline_client_installer_filename="$2"
  # local -r deadline_certificates_location="$3"
  local -r deadline_client_certificates_location="$4"
  # local -r deadline_client_certificate="$5"
  local -r deadline_proxy_certificate="$6"
  local -r deadlineuser_name="$7"
  local -r httpport="$8"
  local -r proxyport="$9"
  local -r deadline_proxy_root_dir="${10}"
  local -r skip_install_packages="${11}"
  # local -r server_cert_basename="${12}"

  # Directories and Permissions
  if [[ "$skip_install_packages" == "false" ]]; then
    log_info "...Install packages for Deadline RCS"
    install_packages
  fi
  sudo mkdir -p /usr/share/desktop-directories

  log_info "...Installing Deadline Client: Worker"
  # Install Client:
  # Deadline Worker
  set -x
  sudo $deadline_installer_dir/$deadline_client_installer_filename \
  --mode unattended \
  --launcherdaemon true \
  --debuglevel 2 \
  --prefix /opt/Thinkbox/Deadline10 \
  --connectiontype Remote \
  --noguimode true \
  --licensemode UsageBased \
  --daemonuser "$deadlineuser_name" \
  --httpport $httpport \
  --tlsport $proxyport \
  --enabletls true \
  --slavestartup true \
  --proxyrootdir $deadline_proxy_root_dir \
  --proxycertificate "$deadline_client_certificates_location/$deadline_proxy_certificate"
  set +x
}

function configure_deadline {
  log_info "...Configure Deadline.ini"
  local -r deadline_proxy_root_dir="$1"
  local -r deadline_certificates_location="$2"
  local -r deadline_client_certificate="$3"
  local -r deadline_client_certificates_location="$4"
  local -r deadline_proxy_certificate="$5"
  local -r license_forwarder="$6"

  # Configure /var/lib/Thinkbox/Deadline10/deadline.ini
  
  # stop service before updating config.
  sudo service Deadline10db stop

  # ensure_value "/var/lib/Thinkbox/Deadline10/deadline.ini" "TlsServerCert=" "/opt/Thinkbox/certs//deadlinedb.service.consul.pfx"
  # ensure_value "/var/lib/Thinkbox/Deadline10/deadline.ini" "TlsCaCert=" "/opt/Thinkbox/certs//ca.crt"

  ensure_value "/var/lib/Thinkbox/Deadline10/deadline.ini" "LaunchPulseAtStartup=" "True"
  ensure_value "/var/lib/Thinkbox/Deadline10/deadline.ini" "LaunchRemoteConnectionServerAtStartup=" "True"
  ensure_value "/var/lib/Thinkbox/Deadline10/deadline.ini" "ProxyRoot=" "$deadline_proxy_root_dir"
  ensure_value "/var/lib/Thinkbox/Deadline10/deadline.ini" "ProxyUseSSL=" "True"
  ensure_value "/var/lib/Thinkbox/Deadline10/deadline.ini" "DbSSLCertificate=" "$deadline_certificates_location/$deadline_client_certificate"
  ensure_value "/var/lib/Thinkbox/Deadline10/deadline.ini" "ProxySSLCertificate=" "$deadline_client_certificates_location/$deadline_proxy_certificate"
  ensure_value "/var/lib/Thinkbox/Deadline10/deadline.ini" "ProxyRoot0=" "$deadline_proxy_root_dir;$deadline_client_certificates_location/$deadline_proxy_certificate"
  ensure_value "/var/lib/Thinkbox/Deadline10/deadline.ini" "NetworkRoot0=" "/opt/Thinkbox/DeadlineRepository10/;$deadline_certificates_location/$deadline_client_certificate"
  # printf "\nlicense_forwarder: $license_forwarder\n\n"
  # if [[ "$license_forwarder" != "none" ]]; then
  #   ensure_value "/var/lib/Thinkbox/Deadline10/deadline.ini" "LaunchLicenseForwarderAtStartup=" "1"
  #   ensure_value "/var/lib/Thinkbox/Deadline10/deadline.ini" "LicenseForwarderSSLPath=" "$license_forwarder"
  # fi
}

function configure_auth {
  log_info "...Configure Auth"
  local -r deadlineuser_name="$1"
  # stop service before updating config.
  sudo service Deadline10db stop
  # configure /opt/Thinkbox/DeadlineRepository10/settings/connection.ini 
  ensure_value "/opt/Thinkbox/DeadlineRepository10/settings/connection.ini" "Authenticate=" "True"
  ensure_value "/opt/Thinkbox/DeadlineRepository10/settings/connection.ini" "EnableSSL=" "True"
  sudo chown $deadlineuser_name:$deadlineuser_name /opt/Thinkbox/DeadlineRepository10/settings/connection.ini
}

function set_hostname {
  db_host_name="$1"
  log_info "...Set hostname"
  cat /etc/hosts | grep -m 1 "127.0.0.1   $db_host_name" || echo "127.0.0.1   $db_host_name" | sudo tee -a /etc/hosts
  sudo hostnamectl set-hostname $db_host_name
}

function options { # Not all defaults are available as args, however the script has been built to easily alter this.
  local installers_bucket=""
  local db_host_name=""
  local license_forwarder="none"
  local deadlineuser_name="$DEFAULT_DEADLINEUSER_NAME"
  local skip_certgen_during_install="false"
  local skip_certgen_during_rcs_install="false"
  local post_certgen_db="false"
  local post_certgen_rcs="false"
  local dbport="$DEFAULT_DBPORT"
  local proxyport="$DEFAULT_PROXYPORT"
  local httpport="$DEFAULT_HTTPPORT"
  local download_dir="$DEFAULT_DOWNLOAD_DIR"
  # local db_host_name="$DEFAULT_DB_HOST_NAME"
  local deadline_proxy_certificate="$DEFAULT_DEADLINE_PROXY_CERTIFICATE"
  local deadline_client_certificate="$DEFAULT_DEADLINE_CLIENT_CERTIFICATE"
  local mongo_url="$DEFAULT_MONGO_URL"
  local skip_download_installers="false"
  local skip_download_mongo="false"
  local skip_install_packages="false"
  local skip_install_db="false"
  local skip_install_rcs="false"
  local install_worker="false"
  local skip_install_validation="false"

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --installers-bucket)
        installers_bucket="$2"
        shift
        ;;
      --deadlineuser-name)
        deadlineuser_name="$2"
        shift
        ;;
      --deadline-version)
        deadline_version="$2"
        shift
        ;;
      --db-host-name)
        db_host_name="$2"
        shift
        ;;
      --license-forwarder)
        license_forwarder="$2"
        shift
        ;;
      --skip-certgen-during-db-install)
        skip_certgen_during_install="true"
        ;;
      --skip-certgen-during-rcs-install)
        skip_certgen_during_rcs_install="true"
        ;;
      --skip-install-db)
        skip_install_db="true"
        ;;
      --skip-install-rcs)
        skip_install_rcs="true"
        ;;
      --install-worker)
        install_worker="true"
        ;;
      --post-certgen-db)
        post_certgen_db="true"
        ;;
      --post-certgen-rcs)
        post_certgen_rcs="true"
        ;;
      --skip-download-installers)
        skip_download_installers="true"
        ;;
      --skip-download-mongo)
        skip_download_mongo="true"
        ;;
      --skip-install-packages)
        skip_install_packages="true"
        ;;
      --skip-install-validation)
        skip_install_validation="true"
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_not_empty "--deadline-version" "$deadline_version"
  assert_not_empty "--db-host-name" "$db_host_name" # db host name required when installing worker as well for proxyroot dir

  if [[ "$install_worker" == "true" ]]; then # if installing the worker, disable db and rcs options
    skip_install_db="true"
    skip_install_rcs="true"
  fi

  # Implicit vars
  cert_org="Deadline10Installer"
  cert_ou="Deadline10MongoDB"
  rcs_cert_ou="Deadline10ConnServer"

  server_cert_basename="$db_host_name"
  deadline_proxy_root_dir="$db_host_name:$proxyport"
  deadline_client_certificate_basename="${deadline_client_certificate%.*}"
  deadline_linux_installers_tar="/tmp/Deadline-${deadline_version}-linux-installers.tar"
  deadline_linux_installers_filename="$(basename $deadline_linux_installers_tar)"
  deadline_linux_installers_basename="${deadline_linux_installers_filename%.*}"

  deadline_installer_dir="$download_dir/$deadline_linux_installers_basename"
  deadline_linux_installer_bucket_key="Deadline/${deadline_version}/Linux/${deadline_linux_installers_filename}"
  # deadline_proxy_certificate_basename="${deadline_proxy_certificate%.*}"
  mongo_installer_tgz="$download_dir/$(basename $mongo_url)"
  deadline_db_installer_filename="DeadlineRepository-${deadline_version}-linux-x64-installer.run"
  deadline_client_installer_filename="DeadlineClient-${deadline_version}-linux-x64-installer.run"
  deadline_certificates_location="/opt/Thinkbox/DeadlineDatabase10/certs"
  deadline_client_certificates_location="/opt/Thinkbox/certs"

  if [[ "$skip_install_db" == "false" ]]; then
    set_hostname $db_host_name # The db requires a host name for other clients to know how to find the service.
  fi

  # Downloads
  if [[ "$skip_download_installers" == "false" ]]; then
    if [[ "$skip_download_mongo" == "false" ]]; then
      download_mongo "$mongo_installer_tgz" "$mongo_url"
    fi
    # Download for Linux and extract archive
    download_deadline "$deadline_linux_installers_tar" "$deadline_linux_installer_bucket_key" "$deadline_linux_installers_filename" "$installers_bucket" "$deadline_installer_dir" "true"
    
    # Download for Windows (archive file only for convenience and future install)
    deadline_windows_installers_tar="/tmp/Deadline-${deadline_version}-windows-installers.zip"
    deadline_windows_installers_filename="$(basename $deadline_windows_installers_tar)"
    deadline_windows_installer_bucket_key="Deadline/${deadline_version}/Windows/${deadline_windows_installers_filename}"
    download_deadline "$deadline_windows_installers_tar" "$deadline_windows_installer_bucket_key" "$deadline_windows_installers_filename" "$installers_bucket" "$deadline_installer_dir" "false"
    
    # Download for OSX (archive file only for convenience and future install)
    deadline_osx_installers_tar="/tmp/Deadline-${deadline_version}-osx-installers.dmg"
    deadline_osx_installers_filename="$(basename $deadline_osx_installers_tar)"
    deadline_osx_installer_bucket_key="Deadline/${deadline_version}/Mac/${deadline_osx_installers_filename}"
    download_deadline "$deadline_osx_installers_tar" "$deadline_osx_installer_bucket_key" "$deadline_osx_installers_filename" "$installers_bucket" "$deadline_installer_dir" "false"
  fi
  
  # Install DB
  if [[ "$skip_install_db" == "false" ]]; then
    setup_directories_and_permissions "$deadlineuser_name" "$deadline_certificates_location" "$deadline_client_certificates_location"
    get_ssl_gen_repo "$deadlineuser_name" "$skip_install_packages" # this repo contains the deadline script to generate certificates

    if [[ "$skip_certgen_during_install" == "true" ]]; then
      install_db_without_certs "$deadline_installer_dir" "$deadline_db_installer_filename" "$mongo_installer_tgz" "$dbport" "$db_host_name" "$deadlineuser_name" "$deadline_certificates_location"
    else
      install_db_with_certs "$deadline_installer_dir" "$deadline_db_installer_filename" "$mongo_installer_tgz" "$dbport" "$db_host_name" "$deadlineuser_name" "$deadline_certificates_location"
      db_certificate_permissions "$deadlineuser_name" "$deadline_certificates_location" "$deadline_client_certificate" "$server_cert_basename" # check permissions again.
    fi
    post_db_install_permissions "$deadlineuser_name"
  fi

  # Install RCS
  if [[ "$skip_install_rcs" == "false" ]]; then
    if [[ "$skip_certgen_during_rcs_install" == "false" ]]; then
      install_rcs_generate_certs "$deadline_installer_dir" "$deadline_client_installer_filename" "$deadline_certificates_location" "$deadline_client_certificates_location" "$deadline_client_certificate" "$deadline_proxy_certificate" "$deadlineuser_name" "$httpport" "$proxyport" "$deadline_proxy_root_dir" "$skip_install_packages"
      client_certificate_permissions "$deadlineuser_name" "$deadline_client_certificates_location" "$deadline_proxy_certificate_basename" "$server_cert_basename"
    else
      install_rcs_no_generate_certs "$deadline_installer_dir" "$deadline_client_installer_filename" "$deadline_certificates_location" "$deadline_client_certificates_location" "$deadline_client_certificate" "$deadline_proxy_certificate" "$deadlineuser_name" "$httpport" "$proxyport" "$deadline_proxy_root_dir" "$skip_install_packages" "$server_cert_basename"
    fi
    configure_deadline "$deadline_proxy_root_dir" "$deadline_certificates_location" "$deadline_client_certificate" "$deadline_client_certificates_location" "$deadline_proxy_certificate" "$license_forwarder"
  fi

  log_info "\n...license_forwarder: $license_forwarder\n\n"
  if [[ "$license_forwarder" != "none" ]]; then
    ensure_value "/var/lib/Thinkbox/Deadline10/deadline.ini" "LaunchLicenseForwarderAtStartup=" "1"
    ensure_value "/var/lib/Thinkbox/Deadline10/deadline.ini" "LicenseForwarderSSLPath=" "$license_forwarder"
  fi

  # Install Worker
  if [[ "$install_worker" == "true" ]]; then
    install_client_worker \
      "$deadline_installer_dir" \
      "$deadline_client_installer_filename" \
      "$deadline_certificates_location" \
      "$deadline_client_certificates_location" \
      "$deadline_client_certificate" \
      "$deadline_proxy_certificate" \
      "$deadlineuser_name" \
      "$httpport" \
      "$proxyport" \
      "$deadline_proxy_root_dir" \
      "$skip_install_packages"
  fi

  # Generate certs seperately
  if [[ "$post_certgen_db" == "true" ]]; then # DB can use externally generated certificates
    generate_certs_for_db_and_rcs "$deadlineuser_name" "$cert_org" "$cert_ou" "$server_cert_basename" "$deadline_certificates_location" "$deadline_client_certificate_basename" "$deadline_client_certificate" "$skip_install_packages" "$deadline_version" "$deadline_proxy_certificate" "$dbport"
    configure_auth "$deadlineuser_name"
  fi
  if [[ "$post_certgen_rcs" == "true" ]]; then # RCS can use externally generated certificates
    generate_certs_for_clients "$deadlineuser_name" "$cert_org" "$rcs_cert_ou" "$server_cert_basename" "$deadline_client_certificates_location" "$deadline_client_certificate_basename" "$deadline_client_certificate" "$skip_install_packages" "$deadline_version" "$deadline_proxy_certificate" "$dbport"
  fi

  # Start the service and validate the configuration is working.  This can be done once certs are installed.
  if [[ "$skip_install_validation" == "false" ]]; then
    start_db_service_and_validate "$dbport"
    start_launcher "$dbport" "$proxyport" # TODO we should validate this too
  fi
}

options "$@"
